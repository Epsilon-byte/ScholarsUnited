extends layout

block content
  .messaging-container
    h1 Event: #{event.Title}
    .event-details-bar
      span.event-date
        i.fas.fa-calendar
        | #{event.date} at #{event.time}
      span.event-location
        i.fas.fa-map-marker-alt
        | #{event.Location || 'No location specified'}
      a.back-link(href=`/events/${event.EventID}`) Back to Event
    
    .participants-box
      h3 Participants (#{participants.length})
      .participants-list
        each participant in participants
          .participant
            img.participant-avatar(src=`https://ui-avatars.com/api/?name=${encodeURIComponent(participant.FullName)}&background=random` alt=participant.FullName)
            span.participant-name= participant.FullName
    
    if !isParticipant
      .join-prompt
        p You need to join this event to participate in the chat.
        form(action=`/events/join/${event.EventID}` method="POST")
          button.btn.btn-primary(type="submit") Join Event
    else
      // Direct message form at the top for better UX
      h2 Send a Message
      form#directMessageForm(action="/api/events/message" method="POST")
        input(type="hidden" name="eventId" value=event.EventID)
        input(type="hidden" name="userId" value=user.id)
        
        label(for="messageInput") Message:
        textarea#messageInput(name="content" placeholder="Type your message here..." required)
        
        button.btn.btn-primary(type="submit") 📨 Send Message
      
      // Messages section
      .messages-container#chatMessages
        h3 Event Messages
        if messages && messages.length
          ul.message-list
            each message in messages
              - const isSender = message.SenderID == user.id;
              li(class=`message-wrapper ${isSender ? 'sender' : 'receiver'}` data-message-id=message.MessageID)
                .message-item
                  // Sender name
                  span.message-sender
                    | 👤 Sender:
                    strong(style="color: #00675b") #{message.SenderName}
                  
                  // Message content and timestamp
                  p #{message.Content}
                  small Sent: #{new Date(message.Timestamp).toLocaleString()}
                  
                  // Show delete/edit buttons only if current user is the sender
                  if isSender
                    form.delete-form(action=`/api/events/message/delete/${message.MessageID}` method="POST")
                      button.delete-btn(type="submit") 🗑️ Delete
                    
                    form.edit-form(action=`/api/events/message/update/${message.MessageID}` method="POST")
                      input(type="text" name="newContent" placeholder="Edit message" required)
                      button.edit-btn(type="submit") ✏️ Save
        else
          .empty-chat
            p No messages yet. Be the first to send a message!

block scripts
  script.
    // Add event listeners for delete and edit forms
    document.addEventListener('DOMContentLoaded', function() {
      // Handle form submissions with JavaScript to prevent page reload
      const directMessageForm = document.getElementById('directMessageForm');
      if (directMessageForm) {
        directMessageForm.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const formData = new FormData(this);
          const eventId = formData.get('eventId');
          const userId = formData.get('userId');
          const content = formData.get('content');
          
          if (!content.trim()) return;
          
          // Show message immediately (optimistic UI)
          addMessageToUI({
            userId: userId,
            content: content,
            senderName: "#{user.FullName}",
            timestamp: new Date()
          });
          
          // Clear the input
          this.reset();
          
          // Send to server
          fetch(this.action, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              eventId: eventId,
              userId: userId,
              content: content
            })
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            console.log('Message sent successfully:', data);
            // Refresh the page to show the new message
            window.location.reload();
          })
          .catch(error => {
            console.error('Error sending message:', error);
            alert('Failed to send message. Please try again.');
          });
        });
      }
      
      // Handle delete forms
      const deleteForms = document.querySelectorAll('.delete-form');
      deleteForms.forEach(form => {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          
          if (confirm('Are you sure you want to delete this message?')) {
            fetch(this.action, {
              method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                // Remove the message from the UI
                const messageItem = this.closest('li');
                if (messageItem) messageItem.remove();
              } else {
                alert('Failed to delete message: ' + data.message);
              }
            })
            .catch(error => {
              console.error('Error deleting message:', error);
              alert('Failed to delete message. Please try again.');
            });
          }
        });
      });
      
      // Handle edit forms
      const editForms = document.querySelectorAll('.edit-form');
      editForms.forEach(form => {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const formData = new FormData(this);
          const newContent = formData.get('newContent');
          
          if (!newContent.trim()) return;
          
          fetch(this.action, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              newContent: newContent
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Update the message content in the UI
              const messageItem = this.closest('li');
              const contentElement = messageItem.querySelector('p');
              if (contentElement) {
                contentElement.textContent = newContent;
              }
              // Clear the input
              this.reset();
            } else {
              alert('Failed to update message: ' + data.message);
            }
          })
          .catch(error => {
            console.error('Error updating message:', error);
            alert('Failed to update message. Please try again.');
          });
        });
      });
      
      // Function to add a message to the UI
      function addMessageToUI(message) {
        const chatMessages = document.getElementById('chatMessages');
        if (!chatMessages) return;
        
        // Remove empty chat message if present
        const emptyChat = chatMessages.querySelector('.empty-chat');
        if (emptyChat) emptyChat.remove();
        
        // Get or create message list
        let messageList = chatMessages.querySelector('.message-list');
        if (!messageList) {
          messageList = document.createElement('ul');
          messageList.className = 'message-list';
          chatMessages.appendChild(messageList);
        }
        
        // Create message element
        const messageItem = document.createElement('li');
        messageItem.className = 'message-wrapper sender';
        
        // Format timestamp
        const timestamp = new Date().toLocaleString();
        
        // Set message HTML
        messageItem.innerHTML = `
          <div class="message-item">
            <span class="message-sender">
              👤 Sender: <strong style="color: #00675b">${message.senderName}</strong>
            </span>
            <p>${message.content}</p>
            <small>Sent: ${timestamp}</small>
          </div>
        `;
        
        // Add to chat and scroll
        messageList.appendChild(messageItem);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
    });
    
    // Auto-refresh the page every 5 seconds to show new messages
    setInterval(function() {
      window.location.reload();
    }, 5000);


