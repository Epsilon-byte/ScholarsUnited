extends layout

block content
  .event-chat-container
    .event-info-bar
      h2= event.Title
      .event-details
        span.event-date
          i.fas.fa-calendar
          | #{event.date} at #{event.time}
        span.event-location
          i.fas.fa-map-marker-alt
          | #{event.Location || 'No location specified'}
        a.back-link(href=`/events/${event.EventID}`) Back to Event
    
    .event-chat-layout
      .participants-panel
        h3 Participants (#{participants.length})
        if !isParticipant
          .join-prompt
            p You need to join this event to participate in the chat.
            form(action=`/events/join/${event.EventID}` method="POST")
              button.join-button(type="submit") Join Event
        
        .participants-list
          each participant in participants
            .participant
              .participant-avatar
                img(src=`https://ui-avatars.com/api/?name=${encodeURIComponent(participant.FullName)}&background=random` alt=participant.FullName)
              .participant-name= participant.FullName
      
      .messaging-panel
        if messages.length === 0
          .empty-chat
            p No messages yet. Be the first to send a message!
        else
          ul.message-list
            each message in messages
              - const isSender = message.SenderID == user.id;
              li(class=`message-wrapper ${isSender ? 'sender' : 'receiver'}`)
                .message-item
                  span.message-sender
                    | 👤 #{message.SenderName}
                  
                  p.message-content #{message.Content}
                  small.message-time #{new Date(message.Timestamp).toLocaleString()}
                  
                  if isSender
                    .message-actions
                      form(action=`/api/events/message/delete/${message.MessageID}`, method="POST")
                        button(type="submit") 🗑️ Delete
                      
                      form(action=`/api/events/message/update/${message.MessageID}`, method="POST")
                        input(type="text", name="newContent", placeholder="Edit message", required)
                        button(type="submit") ✏️ Save
        
        if isParticipant
          form.message-form#messageForm(action="#")
            input(type="hidden" name="eventId" value=event.EventID)
            input(type="hidden" name="userId" value=user.id)
            
            .message-input-container
              textarea#messageInput(name="message" placeholder="Type your message here..." required)
              button.send-button(type="submit")
                i.fas.fa-paper-plane
                span Send

block scripts
  script.
    // Connect to Socket.IO
    const socket = io();
    
    // DOM elements
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    const chatMessages = document.getElementById('chatMessages');
    
    // Only run this code if the user is a participant
    if (messageForm) {
      // Authenticate with socket
      const userId = #{user.id};
      socket.emit('authenticate', userId);
      
      // Join event room
      const eventId = #{event.EventID};
      socket.emit('joinEventRoom', { userId, eventId });
      
      // Handle form submission
      messageForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const message = messageInput.value.trim();
        if (!message) return;
        
        // Send message to server
        fetch('/api/events/message', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            eventId,
            content: message
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Clear input field
            messageInput.value = '';
          } else {
            console.error('Error sending message:', data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
        });
      });
      
      // Listen for new messages
      socket.on('eventMessage', function(data) {
        addMessageToChat(data);
      });
      
      // Clean up when leaving the page
      window.addEventListener('beforeunload', function() {
        socket.emit('leaveEventRoom', { userId, eventId });
      });
    }
    
    // Function to add a new message to the chat
    function addMessageToChat(data) {
      // Remove empty chat message if present
      const emptyChat = chatMessages.querySelector('.empty-chat');
      if (emptyChat) {
        emptyChat.remove();
      }
      
      // Create message element
      const messageList = chatMessages.querySelector('ul') || document.createElement('ul');
      if (!chatMessages.contains(messageList)) {
        chatMessages.appendChild(messageList);
      }
      
      const messageItem = document.createElement('li');
      const isSender = data.userId == #{user.id};
      messageItem.className = `message-wrapper ${isSender ? 'sender' : 'receiver'}`;
      
      // Format the message
      const timestamp = new Date(data.timestamp).toLocaleString();
      messageItem.innerHTML = `
        <div class="message-item">
          <span class="message-sender">
            👤 Sender:
            <strong style="color: #00675b">${data.senderName} (ID: ${data.userId})</strong>
          </span>
          <br>
          <p>${data.message}</p>
          <small>Sent: ${timestamp}</small>
          ${isSender ? `
            <form action="/api/events/message/delete/${data.messageId}" method="POST">
              <button type="submit">🔒 Delete</button>
            </form>
            <form action="/api/events/message/update/${data.messageId}" method="POST">
              <input type="text" name="newContent" placeholder="Edit message" required>
              <button type="submit">🖉 Save and Resend Edit Messages</button>
            </form>
          ` : ''}
        </div>
      `;
      
      // Add to chat and scroll to bottom
      messageList.appendChild(messageItem);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
