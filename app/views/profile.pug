extends layout

block content
  .container
    h1 Profile Overview

    // ‚úÖ Flash messages
    if messages && messages.success
      .alert.alert-success
        each msg in messages.success
          p= msg

    if messages && messages.error
      .alert.alert-danger
        each msg in messages.error
          p= msg

    // ‚úÖ User info section
    if userDetails
      .profile-info
        h2 Your Information
        ul
          li
            strong Full Name:
            | #{userDetails.FullName || 'Not provided'}
          li
            strong Email:
            | #{userDetails.Email || 'Not provided'}
          li
            strong Hobbies:
            | #{userDetails.Hobbies || 'Not provided'}
          li
            strong Academic Info:
            | #{userDetails.AcademicInfo || 'Not provided'}
          li
            strong Availability:
            | #{userDetails.AvailableTime || 'Not set'}
          li
            strong Interests:
            | #{userDetails.Interests && userDetails.Interests.length > 0 ? userDetails.Interests : 'No interests listed'}
    else
      p.text-danger No user information available.

    hr

    // ‚úÖ Profile update form
    h2 Edit Your Profile (optional)
    form(action='/profile/update' method='POST')
      .form-group
        label(for='interests') Interests:
        select#interests.form-control(name='interests' multiple)
          if userDetails.Interests
            each interest in userDetails.Interests.split(',').map(i => i.trim())
              option(selected value=interest)= interest

      .form-group
        label(for='courses') Academic Info:
        input.form-control(
          type='text',
          name='courses',
          id='courses',
          value=(userDetails && userDetails.AcademicInfo) ? userDetails.AcademicInfo : ''
        )

      .form-group
        label(for='free_time') Available Time:
        input.form-control(
          type='time',
          name='free_time',
          id='free_time',
          value=(userDetails && userDetails.AvailableTime) ? userDetails.AvailableTime : ''
        )

      button.btn.btn-primary(type='submit') üíæ Update Profile

    hr

    // ‚úÖ Reset Password section
    h2 Reset Password
    form(action='/profile/reset-password' method='POST')
      .form-group
        label(for='currentPassword') Current Password:
        input.form-control(type='password', name='currentPassword', required)

      .form-group
        label(for='newPassword') New Password:
        input.form-control(type='password', name='newPassword', required)

      .form-group
        label(for='confirmPassword') Confirm New Password:
        input.form-control(type='password', name='confirmPassword', required)

      button.btn.btn-warning(type='submit') üîí Reset Password

    hr

    // ‚úÖ Delete Account Section
    form(action='/profile/delete' method='POST' onsubmit="return confirm('Are you sure you want to delete your account? This cannot be undone.');")
      button.btn.btn-danger(type='submit') üóëÔ∏è Delete My Account

    a.btn.btn-secondary(href='/dashboard' style='margin-top: 20px') ‚Üê Back to Dashboard

  // ‚úÖ JS for interests multi-select
  script(src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js")
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css")

  script.
    document.addEventListener('DOMContentLoaded', function () {
      const interestsEl = document.getElementById('interests');
      if (interestsEl) {
        new Choices(interestsEl, {
          removeItemButton: true,
          placeholder: true,
          placeholderValue: 'Select or type interests',
          duplicateItemsAllowed: false
        });
      }
    });
